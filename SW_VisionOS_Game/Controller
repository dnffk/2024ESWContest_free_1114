#include <Arduino.h>
#include <WiFi.h>
#define LED         4
#define AHRS_RX     16
#define AHRS_TX     17
#define MOTER1      18      // 큰모터
#define MOTER2      19      // 작은 모터 (셔터)
#define LIGHT_ADC   32
#define BTN1        33      // led
#define BTN2        34      // 셔터
#define FREQ1       110
#define FREQ2       190
#define FADETIME    900/2
#define RESOLUTION  8
#define MAXDUTY     255/2
TaskHandle_t Task1;
TaskHandle_t Task2;
TaskHandle_t Task3;
TaskHandle_t Task4;
TaskHandle_t Task5;
TaskHandle_t Task6;
TaskHandle_t Task7;
HardwareSerial mySerial(1); // UART1 사용 (추후에 삭제 예정)
// 연결할 WiFi 정보
const char* ssid = "SIXRLab._2.4G";
const char* password = "ehdtnsixrlab1203!@#";
// 서버 정보
const char* host = "192.168.50.243"; // visionPro 아이피로 변경
const uint16_t port = 8081;
// WiFi 재연결 변수
unsigned long previousMillis = 0;
unsigned long interval = 30000;
int lightness = 0;
bool bLight = 0;
bool bShutter = 0;
bool ledState = false;
bool lastButtonState = LOW;
char AHRS_buffer_read[30];
char ahrs[30];
int pos_packet = 0;
bool bStartPacket = false;
char fBuffer[256];
int ghostNum;
WiFiClient client;
// 와이파이 연결
void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println("Connected to ");
  Serial.println(WiFi.localIP());
}
void setup() {
  Serial.begin(115200); // UART 설정 (추후에 삭제 및 server open 예정)
  mySerial.begin(115200, SERIAL_8N1, AHRS_RX, AHRS_TX);
  initWiFi();
  Serial.print("RSSI: ");
  Serial.println(WiFi.RSSI());
  pinMode(LED, OUTPUT);
  digitalWrite(LED, 0);
  pinMode(BTN1, INPUT);
  pinMode(BTN2, INPUT);
  // LRA 핀을 PWM 출력으로 설정
  ledcSetup(0, FREQ1, RESOLUTION);  // 채널 0 사용
  ledcSetup(1, FREQ2, RESOLUTION);  // 채널 1 사용
  ledcAttachPin(MOTER1, 0);        // 채널 0을 MOTER1에 연결
  ledcAttachPin(MOTER2, 1);        // 채널 1을 MOTER2에 연결
  xTaskCreatePinnedToCore(GetAHRS, "Task1", 10000, NULL, 1, &Task1, 0);
  xTaskCreatePinnedToCore(GetLightness, "Task2", 10000, NULL, 1, &Task2, 0);
  xTaskCreatePinnedToCore(PushBTN, "Task3", 10000, NULL, 1, &Task3, 0);
  xTaskCreatePinnedToCore(SendBuffer, "Task4", 10000, NULL, 1, &Task4, 0);
  xTaskCreatePinnedToCore(GetContact, "Task5", 20000, NULL, 1, &Task5, 1);
  xTaskCreatePinnedToCore(ReconnectingToWiFi, "Task6", 10000, NULL, 1, &Task6, 0);
  xTaskCreatePinnedToCore(GetGhostNum, "Task7", 10000, NULL, 1, &Task7, 1);
}
// 서버로 데이터 전송
void sendDataToServer(String data) {
  if (!client.connect(host, port)) {
    Serial.println("Connection to host failed");
    return;
  }
  // 데이터 전송
  client.print(data);
  Serial.println("Data sent: " + data);
  // 연결 종료
}
void ReconnectingToWiFi(void * parameter) {
  while (1) {
    unsigned long currentMillis = millis();
    if ((WiFi.status() != WL_CONNECTED) && (currentMillis - previousMillis >= interval)) {
      Serial.print(millis());
      Serial.println("Reconnecting to WiFi...");
      WiFi.disconnect();
      WiFi.reconnect();
      previousMillis = currentMillis;
    }
    delay(100);  // 주기적으로 체크
  }
}
void GetAHRS(void *parameter)
{
  while(1){
    while (mySerial.available()) {
      char AHRSData = mySerial.read();
      if (AHRSData == '*') { // 패킷 시작
        bStartPacket = true;
        memset(ahrs, 0, sizeof(ahrs));
      }
      if (AHRSData != '*' && bStartPacket && AHRSData != '\r' && AHRSData != '\n') {
        AHRS_buffer_read[pos_packet++] = AHRSData;
      }
      if (AHRSData == '\r') {
        pos_packet++;
      }
      if (AHRSData == '\n') { // 문자열 끝
        pos_packet++;
        bStartPacket = false;
        strcat(ahrs, AHRS_buffer_read);
        //Serial.println(ahrs); // 데이터를 시리얼 모니터에 출력
        pos_packet = 0;
        memset(AHRS_buffer_read, 0, sizeof(AHRS_buffer_read));
      }
    }
    vTaskDelay(10 / portTICK_PERIOD_MS); // 태스크를 잠시 대기 상태로 전환
  }
}
void GetLightness(void *parameter){
  while(1){
    lightness = analogRead(LIGHT_ADC);
    //Serial.println(lightness);
    vTaskDelay(10 / portTICK_PERIOD_MS); // 1초마다 측정
  }
}
void PushBTN(void *parameter){
  while(1){
    bLight = digitalRead(BTN1);
    bShutter = digitalRead(BTN2);
    // 버튼이 눌렸는지 확인 (떨어지는 엣지 감지)
    if (bLight == HIGH && lastButtonState == LOW) {
      // LED 상태 반전
      ledState = !ledState;
      digitalWrite(LED, ledState);
      // 상태 변경 시 시리얼 출력
      //Serial.println(ledState ? "LED ON" : "LED OFF");
    }
    // 버튼 상태 업데이트
    lastButtonState = bLight;
    // 약간의 딜레이 추가
    delay(50);
    if(bShutter == 1){
      // LRA 세기 증가
      for (int dutyCycle = 0; dutyCycle <= MAXDUTY; dutyCycle++) {
        ledcWrite(1, dutyCycle);
        delay(FADETIME / (MAXDUTY + 1)); // 조절 속도
      }
      // LRA 세기 감소
      for (int dutyCycle = MAXDUTY; dutyCycle >= 0; dutyCycle--) {
        ledcWrite(1, dutyCycle);
        delay(FADETIME / (MAXDUTY + 1)); // 조절 속도
      }
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}
void SendBuffer(void *parameter) {
  while (1) {
    // fBuffer 초기화
    memset(fBuffer, 0, sizeof(fBuffer));
    // fBuffer에 데이터를 저장
    sprintf(fBuffer, "$%s,%d,%d,%d#\r", ahrs, lightness, bLight, bShutter);
    // 데이터를 시리얼 모니터로 송신
    Serial.println(fBuffer);
    sendDataToServer(fBuffer);
    // 약간의 딜레이 추가
    vTaskDelay(100 / portTICK_PERIOD_MS); // 100ms 마다 전송
  }
}
void GetGhostNum(void *parameter){
  while(1){
    if (client) {
      Serial.println("New Client Connected");
      String data = client.readStringUntil('\r'); // 문자열을 '\r'까지 읽음
      Serial.println("Received data: " + data);
      // "$"와 "#" 사이의 값을 추출하여 ghostNum에 저장
      int startIndex = data.indexOf('$'); // '$' 위치 찾기
      int endIndex = data.indexOf('#');   // '#' 위치 찾기
      if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
        String numStr = data.substring(startIndex + 1, endIndex); // 숫자 부분 추출
        ghostNum = numStr.toInt(); // 문자열을 정수로 변환
        Serial.println("Extracted ghostNum: " + String(ghostNum));
      } else {
        Serial.println("Invalid data format");
      }
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}
void GetContact(void *parameter) {
  while (1) {
    if(ghostNum == 1){
      for(int i = 0; i <= MAXDUTY; i++){
        if(ghostNum != 1){
          ledcWrite(0, 0);
          break;
        }
        ledcWrite(0, MAXDUTY);
        delay(1000 / (MAXDUTY + 1));
      }
      // LRA 세기 255에서 0으로 1초 동안 감소
      for (int dutyCycle = MAXDUTY; dutyCycle >= 0; dutyCycle--) {
        if (ghostNum != 1) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, dutyCycle);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
    }
    else if(ghostNum == 2){
      for (int dutyCycle = 0; dutyCycle <= MAXDUTY; dutyCycle++) {
        if (ghostNum != 2) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, dutyCycle);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
      for (int dutyCycle = MAXDUTY; dutyCycle >= 0; dutyCycle--) {
        if (ghostNum != 2) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, dutyCycle);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
    }
    else if(ghostNum == 3){
      for (int i = 0; i <= MAXDUTY; i++) {
        if (ghostNum != 3) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, MAXDUTY);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
      for (int i = 0; i <= MAXDUTY; i++) {
        if (ghostNum != 3) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, MAXDUTY/2);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
    }
    else if(ghostNum == 4){
      for (int i = 0; i <= MAXDUTY; i++) {
        if (ghostNum != 4) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, MAXDUTY/2);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
      for (int i = 0; i <= MAXDUTY; i++) {
        if (ghostNum != 4) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, MAXDUTY);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
    }
    else if(ghostNum == 5){
      for (int i = 0; i <= MAXDUTY; i++) {
        if (ghostNum != 5) {
          ledcWrite(0, 0); // 버튼이 눌리지 않으면 진동 멈춤
          break;
        }
        ledcWrite(0, MAXDUTY);
        delay(1000 / (MAXDUTY + 1)); // 1초 동안 감소
      }
    }
    else{
      ledcWrite(0, 0);
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}
void loop() {}
